
Easy_Management.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000022a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000abd  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fa  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000317  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000200d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_29>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
char high;
char low;

int main(void)
{	
	MCUCR = MCUCR | (1<<JTD);
  d4:	85 b7       	in	r24, 0x35	; 53
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR | (1<<JTD);
  da:	85 b7       	in	r24, 0x35	; 53
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	85 bf       	out	0x35, r24	; 53
	
	CLKPR = 0x80;
  e0:	e1 e6       	ldi	r30, 0x61	; 97
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	CLKPR = 0x00;
  e8:	10 82       	st	Z, r1
	
	DDRD = DDRD | (1<<DDD2);
  ea:	52 9a       	sbi	0x0a, 2	; 10
	DDRD = DDRD | (1<<DDD3);
  ec:	53 9a       	sbi	0x0a, 3	; 10
	
	DDRD = DDRD | (1<<DDD7);
  ee:	57 9a       	sbi	0x0a, 7	; 10
	
	
	PORTD = PORTD | (1<<PORTD3);
  f0:	5b 9a       	sbi	0x0b, 3	; 11
	
	//ADC
	DDRF = DDRF &~ (1<<DDF0);	// ADC0
  f2:	80 98       	cbi	0x10, 0	; 16
	//PORTF = PORTF | (1<<PORTF0);	//PUll up
	
	ADMUX = ADMUX &~(1<<REFS1);
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8f 77       	andi	r24, 0x7F	; 127
  fc:	80 83       	st	Z, r24
	ADMUX = ADMUX | (1<<REFS0);		//Vref=AVcc
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
	
	ADMUX = ADMUX | (1<<ADLAR);		// linksbündig
 104:	80 81       	ld	r24, Z
 106:	80 62       	ori	r24, 0x20	; 32
 108:	80 83       	st	Z, r24
	
	ADMUX = ADMUX &~ (1<<MUX0);
 10a:	80 81       	ld	r24, Z
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	80 83       	st	Z, r24
	ADMUX = ADMUX &~ (1<<MUX1);
 110:	80 81       	ld	r24, Z
 112:	8d 7f       	andi	r24, 0xFD	; 253
 114:	80 83       	st	Z, r24
	ADMUX = ADMUX &~ (1<<MUX2);
 116:	80 81       	ld	r24, Z
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	80 83       	st	Z, r24
	ADMUX = ADMUX &~ (1<<MUX3);
 11c:	80 81       	ld	r24, Z
 11e:	87 7f       	andi	r24, 0xF7	; 247
 120:	80 83       	st	Z, r24
	ADMUX = ADMUX &~ (1<<MUX4);
 122:	80 81       	ld	r24, Z
 124:	8f 7e       	andi	r24, 0xEF	; 239
 126:	80 83       	st	Z, r24
	ADCSRB = ADCSRB &~ (1<<MUX5);	//  MUX5 = 0 -> Single ended ADC0 (PF0)
 128:	eb e7       	ldi	r30, 0x7B	; 123
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	80 83       	st	Z, r24
	
	//ADCSRA = ADCSRA | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	//f_ADC = 125kHz
	ADCSRA = ADCSRA | (1<<ADPS0);
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | (1<<ADPS1);
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | (1<<ADPS2);
 142:	80 81       	ld	r24, Z
 144:	84 60       	ori	r24, 0x04	; 4
 146:	80 83       	st	Z, r24
	
		
	ADCSRA = ADCSRA | (1<<ADEN);	// ADC EIN
 148:	80 81       	ld	r24, Z
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | (1<<ADIE);	// Interrupt enable
 14e:	80 81       	ld	r24, Z
 150:	88 60       	ori	r24, 0x08	; 8
 152:	80 83       	st	Z, r24
	
	sei();
 154:	78 94       	sei
	
	ADCSRA = ADCSRA | (1<<ADSC);	// Messung Startet
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0x88>

0000015e <__vector_29>:
	
	while (1);
}

ISR(ADC_vect)
{	
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	PORTD = PORTD ^ (1<<PORTD2);
 170:	9b b1       	in	r25, 0x0b	; 11
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	89 27       	eor	r24, r25
 176:	8b b9       	out	0x0b, r24	; 11
	
	low = ADCL;
 178:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 17c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <low>
	high = ADCH;
 180:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	
	if(high <= 204)
 188:	8d 3c       	cpi	r24, 0xCD	; 205
 18a:	18 f4       	brcc	.+6      	; 0x192 <__vector_29+0x34>
	{
		PORTD = PORTD &~ (1<<PORTD3);
 18c:	5b 98       	cbi	0x0b, 3	; 11
		PORTD = PORTD &~ (1<<PORTD7);
 18e:	5f 98       	cbi	0x0b, 7	; 11
 190:	02 c0       	rjmp	.+4      	; 0x196 <__vector_29+0x38>
	}
	else
	{
		PORTD = PORTD | (1<<PORTD3);
 192:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD = PORTD | (1<<PORTD7);
 194:	5f 9a       	sbi	0x0b, 7	; 11
	}
	
	ADCSRA = ADCSRA | (1<<ADSC);	// Wandlung starten
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	80 83       	st	Z, r24
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
